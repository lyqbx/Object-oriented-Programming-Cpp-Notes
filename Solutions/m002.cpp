// 难一点的swap
#include <iostream>
using namespace std;

void swap(
int *& a,int * &b
)
{// 在此处补充你的代码
	int  *tmp =  a;
	a = b;  
	b = tmp;
}

// 虽然一般传入指针会修改里面的值，但是swap函数里修改的不是指针指向的值，而是修改指针本身，所以要传入指针的引用
// C++之所以增加引用类型， 主要是把它作为函数参数，以扩充函数传递数据的功能。

// C++ 函数传参：

// (1)将变量名作为实参和形参。这时传给形参的是变量的值，传递是单向的。如果在执行函数期间形参的值发生变化，并不传回给实参。因为在调用函数时，形参和实参不是同一个存储单元。// 同 c

// (2) 传递变量的指针。形参是指针变量，实参是一个变量的地址，调用函数时，形参(指针变量)指向实参变量单元。这种通过形参指针可以改变实参的值。// 同 c

// (3) C++提供了 传递变量的引用。形参是引用变量，和实参是一个变量，调用函数时，形参(引用变量)指向实参变量单元。这种通过形参引用可以改变实参的值。
int main()
{
	int a = 3,b = 5;
	int * pa = & a;
	int * pb = & b;
	swap(pa,pb);
	cout << *pa << "," << * pb;
	return 0;
}